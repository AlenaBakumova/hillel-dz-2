let result1 = 'number' + 3 + 3;
console.log('Результат #1: ' + result1); //Результат: number33
/*
Виконуеться конкатенація
Один из операндів типу string, і два інші операнди типу number приводиться також до типу string і відбуваеться конкатенація
Результат: number33
*/

let result2 = null + 3;
console.log('Результат #2: ' + result2); //Результат: 3
/*
Виконуеться додавання і приведення до типу number
null приводить до number, результатом є 0, після чого відбуваеться додаваня другого операнду типу number, а саме 3
*/

let result3 = 5 && "qwerty";
console.log('Результат #3: ' + result3);//Результат: qwerty
/*
&& - логічне AND
Обидва операнди приведенні до true, результатом виразу буде останній операнд
Завжди приводяться до false - false, null, NaN, 0, '' пуста строка, undefined, 0n
true - все інше
*/

let result4 = +'40' + +'2' + "hillel";
console.log('Результат #4: ' + result4); //Pезультат: 42hillel
/*
+ '40' = 40 - унарний оператор '+' перед типом string перетворю на number
+ '2' = 2, 40 + 2 = 42 - один '+' є бінарниий і виконує додавання, унарний оператор '+' перетворює на number
+ "hillel" - конкатенація number and string 
*/

let result5 = '10' - 5 === 6;
console.log('Результат #5: ' + result5); //Результат: false
/*
'10' - string приводиться до number так як оператор - за замовчуванням приведе свої операнди до чисел
Після приведення, виконаеться віднімання і результат 10 - 5 = 5 
вираз 5 === 6  поверне false
=== це оператор строгої рівності
*/

let result6 = true + false;
console.log('Результат #6: ' + result6); //Pезультат: 1
/*
+ буде розглядатися як математичне додавання
true - приводиться до number, та має значення 1 
false - приводиться до number, та має значення 0
1 + 0 = 1
*/

let result7 = '4px' - 3;
console.log('Результат #7: ' + result7); //Результат: NaN
/*
'4px' - по логіці string має буде приведенний до number, але буде NaN
NaN - 3 = NaN 
*/

let result8 = '4' - 3;
console.log('Результат #8: ' + result8); //Результат: 1
/*
'4' - по логіці string буде приведенний до number
4 - 3 = 1
*/

let result9 = '6' + 3 ** 0;
console.log('Результат #9: ' + result9); //Результат: 61
/*
Оператор піднесення до степеня '**' має вищий пріоритет порівняно з оператором конкатенації '+'
Виконуем операція 3 ** 0, результат 1
Потім відбувається конкатенація string '6' і number  1, що призводить до рядка '61'
*/

let result10 = 10 / '6';
console.log('Результат #10: ' + result10); //Результат: 1.6666666666666667
/*
Виконуеться ділення number на  приведенний до nunber операнд типу string
*/

let result11 = '10' + (5 === 6);
console.log('Результат #11: ' + result11); //Результат: 10false
/*
Oператор === має вищий пріоритет за операцію конкатенації
(5 === 6) = false, 5 не дорівнює 6 і тому false
Потім відбувається конкатенація string '10' і boolean, як результат 10false
*/

let result12 = null == '';
console.log('Результат #12: ' + result12); //Результат: false
/*
null рівний тільки собі і undefined
== не строге равенство
null в порівнняні з пустим значенням string буде false, це максимальне пояснення яке знайшла, але після лекціЇ поняла що баг)))
*/

let result13 = 3 ** (9 / 3);
console.log('Результат #13: ' + result13); //Результат: 27
/*
Перша дія обчислення виразу в дужках  (9 / 3) = 3
Друга - піднесення до степенню 3 ** 3 = 27
*/

let result14 = !!'false' == !!'true';
console.log('Результат #14: ' + result14); //Результат: true
/*
! - інвертує булеве значення, є особливості бо true ans false є стрінгою
!!'false' - !'false' = 'true', !'true' будь який не пустий string - true
!!'true' - !'true' = 'true', !'true' = true
true == true як результат true
*/

let result15 = 0 || '0' && 1;
console.log('Результат #15: ' + result15); //Результат: 1
/*
|| (логічне "або") та && (логічне "і")
0 || '0' це 0 - false, '0' = true, операція поверне '0' -  першим істинний операнд
'0' && 1 це '0' = true, 1 = true, j, обидва операнди true - повертаємо останій істиний операнд - 1
*/

let result16 = (+null == false) < 1;
console.log('Результат #16: ' + result16); //Результат: false
/*
перше вираз у дужках +null = 0 та приведення false до number це 0, 0 == 0 є true
true < 1 = 1 < 1 i це false
*/

let result17 = false && true || true;
console.log('Результат #17: ' + result17); //Результат: true
/*
перше логічне І (&&) - false && true = false так як один із операндів false
друга операція || (логічне "або") - false || true = true
*/

let result18 = false && (false || true);
console.log('Результат #18: ' + result18); //Результат: false
/*
перша операція || (логічне "або") - (false || true) = true
друга операція логічне І (&&) - false && true = false так як один із операндів false
*/

let result19 = (+null == false) < 1 ** 5;
console.log('Результат #19: ' + result19); //Результат: false
/*
(+null == false) - +null = 0 та приведення false до number це 0, 0 == 0 є true
1 ** 5 = 1
true < 1 = false
*/

